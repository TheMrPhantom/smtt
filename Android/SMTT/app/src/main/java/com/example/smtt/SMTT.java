package com.example.smtt;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int128;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SMTT extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ACCOUNT = "account";

    public static final String FUNC_ACTIVATEPOL = "activatePOL";

    public static final String FUNC_CONSTANTS = "constants";

    public static final String FUNC_DISTANCEINMETER = "distanceInMeter";

    public static final String FUNC_ETHADDRESS = "ethAddress";

    public static final String FUNC_FINISHSEARCH = "finishSearch";

    public static final String FUNC_GETPROOFOFLOCATIONCONTRACT = "getProofOfLocationContract";

    public static final String FUNC_GETSIGHTINGINDEX = "getSightingIndex";

    public static final String FUNC_GETSIGHTINGINDEXBOOL = "getSightingIndexBool";

    public static final String FUNC_HASHADDRESS = "hashAddress";

    public static final String FUNC_HASHSTUFF = "hashStuff";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_REPORTHASHEDSIGHTING = "reportHashedSighting";

    public static final String FUNC_REPORTEDSIGHTING = "reportedSighting";

    public static final String FUNC_REVEALSECRET = "revealSecret";

    public static final String FUNC_SEARCHORDERS = "searchOrders";

    public static final String FUNC_SECRETREVEALED = "secretRevealed";

    public static final String FUNC_SENDERINBYTES = "senderInBytes";

    public static final String FUNC_STARTSEARCHTASK = "startSearchTask";

    public static final String FUNC_TAYLOR = "taylor";

    public static final String FUNC_UINTFROMBYTES = "uintFromBytes";

    public static final Event ORDERCREATED_EVENT = new Event("OrderCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REPORTSECRET_EVENT = new Event("ReportSecret", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event REPORTSIGHTING_EVENT = new Event("ReportSighting", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SEARCHFINISHED_EVENT = new Event("SearchFinished", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected SMTT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SMTT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SMTT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SMTT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OrderCreatedEventResponse> getOrderCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERCREATED_EVENT, transactionReceipt);
        ArrayList<OrderCreatedEventResponse> responses = new ArrayList<OrderCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderCreatedEventResponse typedResponse = new OrderCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.trustfactor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderCreatedEventResponse> orderCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OrderCreatedEventResponse>() {
            @Override
            public OrderCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERCREATED_EVENT, log);
                OrderCreatedEventResponse typedResponse = new OrderCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.trustfactor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderCreatedEventResponse> orderCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERCREATED_EVENT));
        return orderCreatedEventFlowable(filter);
    }

    public List<ReportSecretEventResponse> getReportSecretEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REPORTSECRET_EVENT, transactionReceipt);
        ArrayList<ReportSecretEventResponse> responses = new ArrayList<ReportSecretEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReportSecretEventResponse typedResponse = new ReportSecretEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.foundSecret = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReportSecretEventResponse> reportSecretEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReportSecretEventResponse>() {
            @Override
            public ReportSecretEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REPORTSECRET_EVENT, log);
                ReportSecretEventResponse typedResponse = new ReportSecretEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.foundSecret = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReportSecretEventResponse> reportSecretEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REPORTSECRET_EVENT));
        return reportSecretEventFlowable(filter);
    }

    public List<ReportSightingEventResponse> getReportSightingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REPORTSIGHTING_EVENT, transactionReceipt);
        ArrayList<ReportSightingEventResponse> responses = new ArrayList<ReportSightingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReportSightingEventResponse typedResponse = new ReportSightingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addrA = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.addrW = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReportSightingEventResponse> reportSightingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReportSightingEventResponse>() {
            @Override
            public ReportSightingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REPORTSIGHTING_EVENT, log);
                ReportSightingEventResponse typedResponse = new ReportSightingEventResponse();
                typedResponse.log = log;
                typedResponse.addrA = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.addrW = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReportSightingEventResponse> reportSightingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REPORTSIGHTING_EVENT));
        return reportSightingEventFlowable(filter);
    }

    public List<SearchFinishedEventResponse> getSearchFinishedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEARCHFINISHED_EVENT, transactionReceipt);
        ArrayList<SearchFinishedEventResponse> responses = new ArrayList<SearchFinishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SearchFinishedEventResponse typedResponse = new SearchFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pos = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SearchFinishedEventResponse> searchFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SearchFinishedEventResponse>() {
            @Override
            public SearchFinishedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEARCHFINISHED_EVENT, log);
                SearchFinishedEventResponse typedResponse = new SearchFinishedEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pos = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SearchFinishedEventResponse> searchFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEARCHFINISHED_EVENT));
        return searchFinishedEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> account(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint128>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activatePOL(String addrA, String addrW) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVATEPOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrA), 
                new org.web3j.abi.datatypes.Address(160, addrW)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> constants() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONSTANTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> distanceInMeter(BigInteger x1, BigInteger y1, BigInteger x2, BigInteger y2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DISTANCEINMETER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x1), 
                new org.web3j.abi.datatypes.generated.Uint256(y1), 
                new org.web3j.abi.datatypes.generated.Uint256(x2), 
                new org.web3j.abi.datatypes.generated.Uint256(y2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ethAddress(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ETHADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finishSearch(String addrA, String addrW, byte[] position) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINISHSEARCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrA), 
                new org.web3j.abi.datatypes.Address(160, addrW), 
                new org.web3j.abi.datatypes.DynamicBytes(position)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getProofOfLocationContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROOFOFLOCATIONCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getSightingIndex(String addrA, String addressW) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSIGHTINGINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrA), 
                new org.web3j.abi.datatypes.Address(160, addressW)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> getSightingIndexBool(String addrA, String addressW) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSIGHTINGINDEXBOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrA), 
                new org.web3j.abi.datatypes.Address(160, addressW)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> hashAddress(String addres) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addres)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> hashStuff(byte[] id, BigInteger nonce, byte[] secret, byte[] position, String addres) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHSTUFF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(id), 
                new org.web3j.abi.datatypes.generated.Uint32(nonce), 
                new org.web3j.abi.datatypes.DynamicBytes(secret), 
                new org.web3j.abi.datatypes.DynamicBytes(position), 
                new org.web3j.abi.datatypes.Address(160, addres)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> register(String publicKey, BigInteger identifier, BigInteger wei) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(publicKey), 
                new org.web3j.abi.datatypes.generated.Uint32(identifier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, wei);
    }

    public RemoteFunctionCall<TransactionReceipt> reportHashedSighting(String addrA, BigInteger nonce, byte[] hashedSighting) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REPORTHASHEDSIGHTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrA), 
                new org.web3j.abi.datatypes.generated.Uint32(nonce), 
                new org.web3j.abi.datatypes.generated.Bytes32(hashedSighting)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, byte[], byte[], Boolean>> reportedSighting(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REPORTEDSIGHTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, byte[], byte[], Boolean>>(function,
                new Callable<Tuple5<String, BigInteger, byte[], byte[], Boolean>>() {
                    @Override
                    public Tuple5<String, BigInteger, byte[], byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, byte[], byte[], Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> revealSecret(String addrW, byte[] foundSecret) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVEALSECRET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addrW), 
                new org.web3j.abi.datatypes.DynamicBytes(foundSecret)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> searchOrders(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEARCHORDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> secretRevealed(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SECRETREVEALED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> senderInBytes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENDERINBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> startSearchTask(BigInteger trustfactor, BigInteger minNonce, BigInteger wei) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTSEARCHTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(trustfactor), 
                new org.web3j.abi.datatypes.generated.Uint32(minNonce)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, wei);
    }

    public RemoteFunctionCall<BigInteger> taylor(BigInteger x) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TAYLOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int128(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> uintFromBytes(byte[] input, BigInteger start, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UINTFROMBYTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(input), 
                new org.web3j.abi.datatypes.generated.Uint256(start), 
                new org.web3j.abi.datatypes.generated.Uint256(end)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static SMTT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SMTT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SMTT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SMTT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SMTT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SMTT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SMTT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SMTT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SMTT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SMTT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SMTT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SMTT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SMTT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SMTT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SMTT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SMTT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OrderCreatedEventResponse extends BaseEventResponse {
        public String addr;

        public BigInteger trustfactor;

        public BigInteger reward;
    }

    public static class ReportSecretEventResponse extends BaseEventResponse {
        public String addr;

        public byte[] foundSecret;
    }

    public static class ReportSightingEventResponse extends BaseEventResponse {
        public String addrA;

        public String addrW;

        public BigInteger timestamp;
    }

    public static class SearchFinishedEventResponse extends BaseEventResponse {
        public String addr;

        public byte[] pos;
    }
}
